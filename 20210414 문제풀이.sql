SELECT * FROM ATTENDANCE;
SELECT * FROM EXAMS;
SELECT * FROM PROFESSORS;
SELECT * FROM REGIONS;
SELECT * FROM SCORES;
SELECT * FROM SUBJECTS;
SELECT * FROM STUDENTS;

UPDATE SCORES
SET SUBID = 'S' || 'UB' || SUBSTR(SUBID, 4, 1)
;

ROLLBACK;

--1.학생들중에 시험을 한번도 안친 학생
SELECT T1.SNAME
FROM STUDENTS T1, SCORES T2
WHERE T1.SID = T2.SID(+)
AND T2.SID IS NULL
;

--2.교수님들중에 평균이 제일 높은 시험을 출제한 교수를 찾아라
SELECT *
FROM
(
SELECT T2.PNAME, T1.SUBID, ROUND(AVG(T1.SCORE),2)AS SCOR,
    RANK() OVER(ORDER BY ROUND(AVG(T1.SCORE),2) DESC)AS RNK
FROM SCORES T1, PROFESSORS T2
WHERE T1.PID = T2.PID
GROUP BY T2.PNAME, T1.SUBID
)T3
WHERE T3.RNK = 1
;

--3.부산에 사는 학생들의 총점과 평균(시험 친 사람)
SELECT T1.SADDR, T3.RNAME, ROUND(SUM(T2.SCORE), 2), ROUND(AVG(T2.SCORE), 2)
FROM STUDENTS T1, SCORES T2, REGIONS T3
WHERE T1.SID = T2.SID
AND T1.SADDR = T3.RGID
AND T1.SADDR = 'RG01'
GROUP BY T1.SADDR, T3.RNAME
;

--------------------------------------------------------------------------------

SELECT *
FROM
(
SELECT T1.SID, T1.SNAME, T2.PID, T2.SUBID, T2.ENAME
FROM STUDENTS T1, EXAMS T2
ORDER BY T1.SID ASC
)T3, SCORES T4
WHERE T3.SID = T4.SID
;

SELECT *
FROM
(
SELECT *-- NVL(NULL, 0)
FROM STUDENTS T1, SCORES T2, SUBJECTS T3
WHERE T1.SID = T2.SID (+)
AND T2.SUBID(+) = T3.SUBID
)T3, SCORES T4
WHERE T3.SID = T4.SID(+)
;

SELECT * FROM ATTENDANCE;
SELECT * FROM EXAMS;
SELECT * FROM PROFESSORS;
SELECT * FROM REGIONS;
SELECT * FROM SCORES;
SELECT * FROM SUBJECTS;
SELECT * FROM STUDENTS;

--------------------------------------------------------------------------------

    SELECT 
    E.RGID,
    E.RNAME,
    NVL(F.ATT_CNT,0),
    NVL(F.TLT_CNT, 0), 
    ROUND(NVL(F.ATT_CNT,0) / NVL(F.TLT_CNT, 1) * 100,2) AS RLT  
    
    FROM
        REGIONS E,
        (
        SELECT D.RGID, D.RNAME
                , COUNT(B.SID) AS ATT_CNT, COUNT(*) AS TLT_CNT 
                , COUNT(B.SID) / COUNT(*) * 100 AS RLT
        FROM
            (
                SELECT T3.SID, T3.SUBID, T4.ADATE 
                FROM
                (
                    SELECT T1.SID, T2.SUBID
                    FROM STUDENTS T1, SUBJECTS T2
                ) T3,
                (
                    SELECT ADATE FROM ATTENDANCE 
                    GROUP BY ADATE
                ) T4
            ) A, ATTENDANCE B, STUDENTS C, REGIONS D
        WHERE A.SID = B.SID(+) AND A.SUBID = B.SUBID(+) AND TO_CHAR(A.ADATE, 'YYYYMMDD') = TO_CHAR(B.ADATE(+), 'YYYYMMDD')
        AND A.SID = C.SID
        AND C.SADDR = D.RGID
        GROUP BY D.RGID, D.RNAME
    ) F
    WHERE E.RGID = F.RGID(+)
    ;

--------------------------------------------------------------------------------

--시험전체리스트 - 학생이름 - 과목명 - 출제교수명 - 점수
SELECT T2.SNAME, T4.SNAME, T3.PNAME, T1.SCORE
FROM SCORES T1, STUDENTS T2, PROFESSORS T3, SUBJECTS T4
WHERE T1.SID = T2.SID
AND T1.PID = T3.PID
AND T1.SUBID = T4.SUBID
;

--시험친 학생들만 --> 출제한 교수별 점수 리스트
SELECT T2.PNAME, ROUND(AVG(T1.SCORE), 2)
FROM SCORES T1, PROFESSORS T2
WHERE T1.PID = T2.PID
GROUP BY T2.PNAME
;

--같은 지역에 살고있는 학생과 교수 리스트  지역명 학생명 교수명
SELECT T3.RNAME, COUNT(*)
FROM STUDENTS T1, PROFESSORS T2, REGIONS T3
WHERE T1.SADDR = T3.RGID
AND T2.PADDR = T3.RGID
GROUP BY T3.RNAME
;

--여자 교수님들이 출제한 시험결과에 제일 좋은 결과를 얻은 학생
SELECT *
FROM
(
SELECT T1.PID, T1.PNAME, T3.SNAME, T2.SCORE,
    RANK() OVER(ORDER BY T2.SCORE DESC)AS RNK
FROM PROFESSORS T1, SCORES T2, STUDENTS T3
WHERE T1.PGENDER = 'F'
AND T1.PID = T2.PID
AND T2.SID = T3.SID
)
WHERE RNK = 1
;

--학생별 총점, 평균, 순위 ===시험 친것만

SELECT T2.SNAME, ROUND(SUM(T1.SCORE), 0)AS SUM, ROUND(AVG(T1.SCORE), 0)AS AVG,
    RANK() OVER(ORDER BY AVG(T1.SCORE) DESC)AS RNK
FROM SCORES T1, STUDENTS T2
WHERE T1.SID = T2.SID
GROUP BY T2.SNAME
;

SELECT * FROM ATTENDANCE;
SELECT * FROM EXAMS;
SELECT * FROM PROFESSORS;
SELECT * FROM REGIONS;
SELECT * FROM SCORES;
SELECT * FROM SUBJECTS;
SELECT * FROM STUDENTS;

--날짜별 학생들의 출석숫자
    SELECT T1.A, COUNT(T2.ADATE)
    FROM
    (
    SELECT TO_CHAR(TO_DATE('2021/04/01', 'YYYY/MM/DD') + (LEVEL -1), 'YY/MM/DD')AS A
    FROM DUAL
    CONNECT BY LEVEL <= 30
    )T1, ATTENDANCE T2
    WHERE T1.A = T2.ADATE(+)
    GROUP BY T1.A
    ORDER BY T1.A ASC
    ;

SELECT * FROM ATTENDANCE;

--부산에 사는 학생들의 출석률
    SELECT T4.A, T1.SNAME, COUNT(T1.SNAME)
    FROM STUDENTS T1, REGIONS T2, ATTENDANCE T3,
    (
    SELECT TO_CHAR(TO_DATE('2021/04/01', 'YYYY/MM/DD') + (LEVEL -1), 'YY/MM/DD')AS A
    FROM DUAL
    CONNECT BY LEVEL <= 30
    )T4
    WHERE T1.SADDR = T2.RGID
    AND T4.A = T3.ADATE(+)
    AND T1.SID = T3.SID
    AND T2.RNAME = '부산'
    GROUP BY T4.A, T1.SNAME
    ORDER BY T4.A
    ;
    
SELECT * FROM SCORES;
SELECT * FROM REGIONS;
SELECT * FROM STUDENTS;
SELECT * FROM ATTENDANCE;

--시험 안친 학생들 0점처리하고 학생,평균,총점,순위
    
        SELECT T4.SNAME, ROUND(AVG(REALSCORE), 0) AS 평균, ROUND(SUM(REALSCORE), 0)AS 총합,
            RANK() OVER(ORDER BY ROUND(AVG(REALSCORE), 2) DESC) AS 순위
        FROM
        (
            SELECT T1.SID, T1.SNAME, NVL(SCORE, 0) AS REALSCORE
            FROM STUDENTS T1, SCORES T2, SUBJECTS T3
            WHERE T1.SID = T2.SID (+)
            AND T2.SUBID(+) = T3.SUBID 
        )T4
        GROUP BY T4.SNAME
        ;
    
    
    
    SELECT *
    FROM STUDENTS T1, SCORES T2, SUBJECTS T3
    WHERE T1.SID = T2.SID(+)
    AND T2.SUBID(+) = T3.SUBID
    ;
    
    SELECT *
    FROM STUDENTS T1, SCORES T2
    WHERE T1.SID = T2.SID(+)
    ;
    
    SELECT *
    FROM SCORES T2, SUBJECTS T3
    WHERE T2.SUBID(+) = T3.SUBID
    ;
    
SELECT * FROM STUDENTS;
SELECT * FROM SCORES;
SELECT * FROM SUBJECTS;
SELECT * FROM EXAMS;

SELECT T2.PID, T2.PNAME, T3.SNAME, T1.SCORE
FROM
(
SELECT *
FROM SCORES
WHERE SCORE < 80
)T1, PROFESSORS T2, STUDENTS T3
WHERE T1.PID = T2.PID
AND T1.SID = T3.SID
;

SELECT SID, SNAME,
    CASE 
        SGENDER WHEN 'M' THEN '남자'
                WHEN 'F' THEN '녀자'
    END AS 성별
FROM STUDENTS
;

SELECT * FROM EXAMS;
SELECT * FROM STUDENTS;
SELECT * FROM SUBJECTS;
SELECT * FROM SCORES;

SELECT T1.SID, T1.SNAME, T3.ENAME, ROUND(NVL(T2.SCORE, 0), 0)
FROM STUDENTS T1, SCORES T2, EXAMS T3
WHERE T1.SID = T2.SID(+)
AND T2.SUBID(+) = T3.SUBID
;

SELECT TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 'YYYY-MM-DD') + (LEVEL - 14)
FROM DUAL
CONNECT BY LEVEL < 30
;

SELECT TO_CHAR(TRUNC(SYSDATE), 'YYYY-MM-DD HH:MI:SS')
FROM DUAL
;

CREATE TABLE TEMPORARY1
(
    DATE1 DATE NOT NULL,
    DATE2 DATE NOT NULL
);

INSERT INTO TEMPORARY1 VALUES (TO_DATE('2021-04-14 11:14:33', 'YYYY-MM-DD HH:MI:SS')
                                ,TO_DATE('2021-01-19 05:22:55', 'YYYY-MM-DD HH:MI:SS')
);

--COMMIT;

SELECT TRUNC(DATE1 - DATE2)
FROM TEMPORARY1
;

SELECT TO_CHAR(TRUNC(SYSDATE, 'DAY'), 'YYYY-MM-DD HH24:MI:SS') FROM DUAL;
--현재날짜의 최근 일요일 날짜 리턴

SELECT TO_CHAR(TRUNC(SYSDATE, 'DD'), 'YYYY-MM-DD HH24:MI:SS') FROM DUAL;
SELECT TO_CHAR(TRUNC(SYSDATE, 'MI'), 'YYYY-MM-DD HH24:MI:SS') FROM DUAL;

--이번달 1일부터 마지막 날짜 까지를 표시
SELECT TO_DATE(TRUNC(SYSDATE, 'MONTH')), (LEVEL -1),
        TO_DATE(TRUNC('2021-04-01')) + (LEVEL -1)
FROM DUAL
CONNECT BY LEVEL <= TO_NUMBER(TO_CHAR(LAST_DAY(SYSDATE), 'DD'))
;

SELECT TO_CHAR(LAST_DAY(TO_DATE('2021-12-05')), 'DD') FROM DUAL;